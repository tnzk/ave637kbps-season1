#!/usr/bin/env ruby
# -*- coding: utf-8 -*-

$: << ENV['PWD']
require 'hakorb'
require 'sdl'
require 'opengl'

abort 'Specify a map name like this: ./sim map001.txt' if ARGV.size == 0

map_name = ARGV[0]

# Set key server
key_server = 0
old_key_server = 0
UP    = 0x0001
RIGHT = 0x0002
DOWN  = 0x0004
LEFT  = 0x0008

# Initialize screen
SDL.init( SDL::INIT_VIDEO )
SDL::TTF.init
screen = SDL.setVideoMode( 640, 480, 16, SDL::SWSURFACE )

# Load images
chips = [ SDL::Surface.loadBMP( 'resources/g001.bmp' ),
          SDL::Surface.loadBMP( 'resources/g002.bmp' ),
          SDL::Surface.loadBMP( 'resources/g003.bmp' )]
image = SDL::Surface.loadBMP( 'resources/tnzk.bmp' )
#image.setColorKey( SDL::SRCCOLORKEY, image.getPixel(0,0) ) 
#image = image.displayFormat 

# Load fonts
font = SDL::TTF.open('Migu-1P-regular.ttf', 16)

w = World.new(10,10,10)
w.load(map_name)

z = 0
loop do
  while event = SDL::Event2.poll 
    case event 
    when SDL::Event2::Quit 
      exit 
    end
  end

  screen.fillRect( 0, 0, 640, 480, [ 0, 0, 0 ] )

  SDL::Key.scan
  key_server |=  UP       if SDL::Key.press?(SDL::Key::UP)
  key_server &= ~UP   unless SDL::Key.press?(SDL::Key::UP)
  key_server |=  DOWN     if SDL::Key.press?(SDL::Key::DOWN)
  key_server &= ~DOWN unless SDL::Key.press?(SDL::Key::DOWN)

  z += 1 if (key_server & UP)   != 0 && (old_key_server & UP)   == 0
  z -= 1 if (key_server & DOWN) != 0 && (old_key_server & DOWN) == 0
  z = 0 if z < 0
  z = w.depth - 1if z >= w.depth

  12.times do |y|
    12.times do |x|
      if w[x,y,z]
        img = chips[w[x,y,z].chip]
        screen.put( img, x * 40 + 30, y * 40 + 30)
      end
    end
  end
  font.draw_shaded_utf8( screen, w.name, 450, 40, 255, 255, 255, 0, 0, 0)
  font.draw_shaded_utf8( screen, "階層: #{z + 1}", 450, 65, 255, 255, 255, 0, 0, 0)
  screen.updateRect( 0, 0, 0, 0 )
  old_key_server = key_server

end
